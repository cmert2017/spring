Spring Project Structure:

src/main/java : Contains application source code
src/main/resources : Contains non-java resources
src/test/java : Contains test code


mvnw and mwnw.cmd : These are maven wrapper scrips. You can use these scripts to build your project, even if you do not
have Maven installed on your machine.


pom.xml :  This is the Maven build specification

CydeoApplication.java : This is the Spring boot main class that bootstrapts the project.

application.properties : This file is initially empty but offers a place where you can specify configuration properties.

resources/static: contains any static content(images, css, js, etc.)

resources/template : Contains template files that will be used to render the content through the browser(Thymeleaf)

CydeoApplicationtest : This is a simple test calls that ensures that the Spring application context loads successfully.
You will add moe test to the mix as you develop the application.

Build specification:

< parent> : This specifies that your project has spring-boot-starter-parent as its parent POM.
This parent POM provides dependency management for several libraries commonly-used in Spring projects.
For those libraries covered by the parent POM, you wont have to specify a version, because it is inherited from the parent.

All dependencies have the word "starter" in their artificat ID.
Your build file will be significantly smaller and easier to manage because you wont need to declare a dependency on every library
you might need.

You are able to think of your dependencies in terms of what capabilities they provide, rather than their library names(web starter dependency)

You are free from the burden of worrying bout library versions.  You only need to worry
about which version of Spring Boot you are using.

Spring Boot plugin : It provides a maven goal that enables you to run the application using maven.
It ensures all dependency libraries included within the executable JAR file.

----
BootStrapping the application :
Because you will be running the application from an executable JAR, it is important to have a main class that will
be executed when that JAR file is run.

@SpringBootApplication : is a composite annotation that combines the following annotations:
@SpringBootConfiguration: Designates this class as configuration class. You can add Java based Spring framework
configuration to this class if you need to. This annotation is a specialize form of the
@Configuration annotation.

@EnableAutoConfiguration : Enables Spring Boot automatic configuration. It tells to Spring Boot to automatically
configure any components that it thinks you will need.

@Enable*

@ComponentScan : Enables component scanning. This lets you declare other classes with annotation like @Component to have
Spring automatically discover and register them as components in the Spring application context.

main() method : calls a static run method on SpringApplication class, which performs the actual bootstraping of the application, creating
the Spring application context. The 2 parameters passed to run the method are a configuration class, and the command line arguments.